// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BigInt.asUintN(n, a) is replaced 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const g = JSBI.BigInt(1);
JSBI.asUintN(10, g);"
`;

exports[`it works with AssignmentExpressions 1`] = `
"var _x, _x2, _x3, _y, _x4, _y2;

import JSBI from \\"./jsbi.mjs\\";
const o = {};
o.x = {};
o.x.y = JSBI.BigInt(1);
o.x.yz = JSBI.BigInt(1);
const y = 'y';
const z = 'z';
const b = JSBI.BigInt(1);
_x = o.x, _x[\\"y\\"] = JSBI.add(_x[\\"y\\"], b);
_x2 = o.x, _x2['y'] = JSBI.add(_x2['y'], b);
_x3 = o.x, _y = y, _x3[_y] = JSBI.add(_x3[_y], b);
_x4 = o.x, _y2 = y + z, _x4[_y2] = JSBI.add(_x4[_y2], b);"
`;

exports[`non-strict comparisions are not changed 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const g = JSBI.BigInt(1);

if (g == 1) {
  console.log(g);
}

if (g != 1) {
  console.log(g);
}

if (g < 1) {
  console.log(g);
}

if (g > 1) {
  console.log(g);
}

if (g <= 1) {
  console.log(g);
}

if (g >= 1) {
  console.log(g);
}"
`;

exports[`works 1`] = `
"import JSBI from \\"./jsbi.mjs\\";

function f() {
  const x = JSBI.BigInt(1);
  return JSBI.add(x, x);
}"
`;

exports[`works when type of variable is changed 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
let g1 = 1;
g1 = JSBI.BigInt(1);

if (JSBI.equal(g1, JSBI.BigInt(1))) {
  console.log(g1);
}"
`;
